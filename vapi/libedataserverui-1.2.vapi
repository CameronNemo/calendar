/* libedataserverui-1.2.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "E", gir_namespace = "EDataServerUI", gir_version = "1.2", lower_case_cprefix = "e_")]
namespace E {
	[CCode (cheader_filename = "libedataserverui/libedataserverui.h")]
	public class CredentialsPrompter : GLib.Object {
		public CredentialsPrompter (E.SourceRegistry registry);
		public E.SourceRegistry get_registry ();
		public E.SourceCredentialsProvider get_provider ();
		public bool get_auto_prompt ();
		public void set_auto_prompt (bool auto_prompt);
		public bool get_auto_prompt_disabled_for (E.Source source);
		public void set_auto_prompt_disabled_for (E.Source source, bool is_disabled);
		public virtual Gtk.Window get_dialog_parent ();
		//public bool register_impl (string authentication_method, E.CredentialsPrompterImpl prompter_impl);
		//public void unregister_impl (string authentication_method, E.CredentialsPrompterImpl prompter_impl);
		public void process_awaiting_credentials ();
		public bool process_source (E.Source source);
		public async void prompt (E.Source source, string error_text, E.CredentialsPrompterPromptFlags flags, out E.Source out_source, out E.NamedParameters credentials) throws GLib.Error;
		public void complete_prompt_call (GLib.SimpleAsyncResult async_result, E.Source source, E.NamedParameters credentials, GLib.Error error);
		public bool loop_prompt_sync (E.Source source, E.CredentialsPrompterPromptFlags flags, E.CredentialsPrompterLoopPromptFunc func, void* user_data, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	/*[CCode (cheader_filename = "libedataserverui/libedataserverui.h")]
	public class E.CredentialsPrompterImpl : E.Extension {
		public E.CredentialsPrompter get_credentials_prompter ();
		public void prompt (void* prompt_id, E.Source auth_source, E.Source cred_source, string error_text, E.NamedParameters credentials);
		public void prompt_finish (void* prompt_id, E.NamedParameters credentials);
		public virtual void cancel_prompt (void* prompt_id);
		public signal void prompt_finished (void* prompt_id, E.NamedParameters credentials);
	}*/
	[CCode (cheader_filename = "libedataserverui/libedataserverui.h", cprefix = "E_CREDENTIALS_PROMPTER_PROMPT_FLAG_", has_type_id = false)]
	[Flags]
	public enum CredentialsPrompterPromptFlags {
		NONE,
		ALLOW_SOURCE_SAVE,
		ALLOW_STORED_CREDENTIALS
	}
	[CCode (cheader_filename = "libedataserverui/libedataserverui.h", instance_pos = 4.9)]
	public delegate bool CredentialsPrompterLoopPromptFunc (E.CredentialsPrompter prompter, E.Source source, E.NamedParameters credentials, out bool authenticated, GLib.Cancellable? cancellable = null) throws GLib.Error;
}
